package core

import (
	"errors"
	"fmt"
	"sync"

	"bitbucket.org/bdsengineering/perceptor/pkg/clustermanager"
	common "bitbucket.org/bdsengineering/perceptor/pkg/common"
	"bitbucket.org/bdsengineering/perceptor/pkg/scanner"
	"github.com/prometheus/common/log"
)

// VulnerabilityCache is the root of the core model
type VulnerabilityCache struct {
	mutex sync.Mutex

	// map of pod-uid to pod
	pods map[string]Pod
	// TODO does this need to be map[common.Image]*ImageScanResults ?
	imageScanResults map[common.Image]ImageScanResults

	imagesToBeScanned chan common.Image
	imageScanComplete chan ImageScanComplete

	// ?? queue of things waiting to be picked up from hub
	// ?? queue of things waiting to be sent to API server
}

func (vc *VulnerabilityCache) ImagesToBeScanned() <-chan common.Image {
	return vc.imagesToBeScanned
}

func (vc *VulnerabilityCache) ImageScanComplete() <-chan ImageScanComplete {
	return vc.imageScanComplete
}

// What should this be set to?  ... who knows
// This is in place of a queue implementation to keep track
// of the images that need to be scanned by the hub.
// Maybe we can change that later.
// Let's hope 300 is large enough to keep it from blocking,
// but doesn't waste tons of memory.
var pendingImageScanLimit = 300
var pendingImageAnnotationLimit = 300

func NewVulnerabilityCache() *VulnerabilityCache {
	return &VulnerabilityCache{
		pods:              make(map[string]Pod),
		imageScanResults:  make(map[common.Image]ImageScanResults),
		imagesToBeScanned: make(chan common.Image, pendingImageScanLimit),
		imageScanComplete: make(chan ImageScanComplete, pendingImageAnnotationLimit),
	}
}

// AddPod should be called when receiving new pods from the
// clustermanager.  It returns true if it hasn't yet seen the pod,
// and false if the pod has already been added.
// It extract the containers and images from the pod,
// adding them into the cache.
func (vc *VulnerabilityCache) AddPod(newPod clustermanager.Pod) bool {
	_, ok := vc.pods[newPod.UID]
	if ok {
		// TODO should we update the cache?
		// skipping for now
		return false
	}
	log.Infof("about to add pod: %v", newPod)
	containers := []Container{}
	for _, newCont := range newPod.Spec.Containers {
		addedCont := NewContainer(newCont.Image, newCont.Name)
		containers = append(containers, *addedCont)
		_, hasImage := vc.imageScanResults[newCont.Image]
		if !hasImage {
			addedImage := NewImageScanResults()
			vc.imageScanResults[newCont.Image] = *addedImage
			log.Infof("adding image %s to cache", newCont.Image)
			vc.imagesToBeScanned <- newCont.Image
		} else {
			log.Infof("not adding image %s, already have in cache", newCont.Image)
		}
	}
	log.Infof("done adding containers+images from pod %s:%s", newPod.Namespace, newPod.Name)
	addedPod := NewPod(newPod.Name, string(newPod.UID), newPod.Namespace, containers)
	vc.pods[addedPod.UID] = *addedPod
	return true
}

func (vc *VulnerabilityCache) AddScanResultsFromProject(project scanner.Project) error {
	for _, version := range project.Versions {
		err := vc.AddScanResult(version)
		if err != nil {
			return err
		}
	}
	return nil
}

func (vc *VulnerabilityCache) AddScanResult(version scanner.Version) error {
	image := *common.NewImage(version.VersionName)
	results := ScanResults{
		VulnerabilityCount:   version.RiskProfile.HighRiskVulnerabilityCount(),
		OverallStatus:        version.PolicyStatus.OverallStatus,
		PolicyViolationCount: version.PolicyStatus.ViolationCount()}

	// add scan results into cache
	img, ok := vc.imageScanResults[image]
	if !ok {
		return errors.New(fmt.Sprintf("expected to already have image %s, but did not", image))
	}

	img.ScanResults = &results
	img.ScanStatus = ScanStatusComplete

	affectedPods := []Pod{}
	for _, pod := range vc.pods {
		if pod.hasImage(image) {
			affectedPods = append(affectedPods, pod)
		}
	}
	isc := ImageScanComplete{
		AffectedPods: affectedPods,
		Image:        image,
		ScanResults:  results,
	}
	vc.imageScanComplete <- isc

	return nil
}
