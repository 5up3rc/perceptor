package core

import (
	"errors"
	"fmt"
	"sync"

	"bitbucket.org/bdsengineering/perceptor/pkg/clustermanager"
	common "bitbucket.org/bdsengineering/perceptor/pkg/common"
	"bitbucket.org/bdsengineering/perceptor/pkg/scanner"
	"github.com/prometheus/common/log"
)

// VulnerabilityCache is the root of the core model
type VulnerabilityCache struct {
	mutex sync.Mutex

	// map of pod-uid to pod
	Pods           map[string]Pod
	Images         map[common.Image]*ImageScanResults
	ImageScanQueue []common.Image
}

func NewVulnerabilityCache() *VulnerabilityCache {
	return &VulnerabilityCache{
		Pods:           make(map[string]Pod),
		Images:         make(map[common.Image]*ImageScanResults),
		ImageScanQueue: []common.Image{}}
}

// AddPod should be called when receiving new pods from the
// clustermanager.  It returns true if it hasn't yet seen the pod,
// and false if the pod has already been added.
// It extract the containers and images from the pod,
// adding them into the cache.
func (vc *VulnerabilityCache) AddPod(newPod clustermanager.Pod) bool {
	_, ok := vc.Pods[newPod.UID]
	if ok {
		// TODO should we update the cache?
		// skipping for now
		return false
	}
	log.Infof("about to add pod: UID %s, name %s", newPod.UID, newPod.Name)
	containers := []Container{}
	for _, newCont := range newPod.Spec.Containers {
		addedCont := NewContainer(newCont.Image, newCont.Name)
		containers = append(containers, *addedCont)
		_, hasImage := vc.Images[newCont.Image]
		if !hasImage {
			addedImage := NewImageScanResults()
			vc.Images[newCont.Image] = addedImage
			log.Infof("adding image %s to image scan queue", newCont.Image)
			vc.addImageToQueue(newCont.Image)
		} else {
			log.Infof("not adding image %s to image scan queue, already have in cache", newCont.Image)
		}
	}
	log.Infof("done adding containers+images from pod %s -- %s:%s", newPod.UID, newPod.Namespace, newPod.Name)
	addedPod := NewPod(newPod.Name, string(newPod.UID), newPod.Namespace, containers)
	vc.Pods[addedPod.UID] = *addedPod
	return true
}

func (vc *VulnerabilityCache) AddScanResultsFromProject(project scanner.Project) error {
	vc.mutex.Lock()
	defer vc.mutex.Unlock()
	for _, version := range project.Versions {
		err := vc.addScanResult(version)
		if err != nil {
			return err
		}
	}
	return nil
}

func (vc *VulnerabilityCache) addImageToQueue(image common.Image) {
	vc.mutex.Lock()
	defer vc.mutex.Unlock()
	vc.ImageScanQueue = append(vc.ImageScanQueue, image)
}

func (vc *VulnerabilityCache) getNextImageFromQueue() *common.Image {
	vc.mutex.Lock()
	defer vc.mutex.Unlock()
	if len(vc.ImageScanQueue) == 0 {
		return nil
	}

	first := vc.ImageScanQueue[0]
	err := vc.startScanning(first)
	if err != nil {
		log.Errorf("unable to start scanning image %s: %s", first.Name(), err.Error())
		return nil
	}

	vc.ImageScanQueue = vc.ImageScanQueue[1:]
	return &first
}

func (vc *VulnerabilityCache) startScanning(image common.Image) error {
	results, ok := vc.Images[image]
	if !ok {
		return fmt.Errorf("expected to already have image %s, but did not", image.Name())
	}
	if results.ScanStatus == ScanStatusInProgress {
		return fmt.Errorf("can not start scanning image %s, scan already in progress", image.Name())
	}
	results.ScanStatus = ScanStatusInProgress
	return nil
}

func (vc *VulnerabilityCache) errorScanning(image common.Image) error {
	results, ok := vc.Images[image]
	if !ok {
		return fmt.Errorf("expected to already have image %s, but did not", image.Name())
	}
	if results.ScanStatus != ScanStatusInProgress {
		return fmt.Errorf("can not finish scanning image %s, scan not in progress", image.Name())
	}
	results.ScanStatus = ScanStatusError
	// for now, just readd the image to the queue upon error
	vc.addImageToQueue(image)
	return nil
}

func (vc *VulnerabilityCache) finishScanning(image common.Image) error {
	results, ok := vc.Images[image]
	if !ok {
		return fmt.Errorf("expected to already have image %s, but did not", image)
	}
	if results.ScanStatus != ScanStatusInProgress {
		return fmt.Errorf("can not finish scanning image %s, scan not in progress", image.Name())
	}
	results.ScanStatus = ScanStatusComplete
	return nil
}

func (vc *VulnerabilityCache) inProgressScanJobs() []common.Image {
	inProgressImages := []common.Image{}
	for image, results := range vc.Images {
		if results.ScanStatus == ScanStatusInProgress {
			inProgressImages = append(inProgressImages, image)
		}
	}
	return inProgressImages
}

func (vc *VulnerabilityCache) addScanResult(version scanner.Version) error {
	image := common.Image(version.VersionName)
	results := ScanResults{
		VulnerabilityCount:   version.RiskProfile.HighRiskVulnerabilityCount(),
		OverallStatus:        version.PolicyStatus.OverallStatus,
		PolicyViolationCount: version.PolicyStatus.ViolationCount()}

	// add scan results into cache
	scanResults, ok := vc.Images[image]
	if !ok {
		return errors.New(fmt.Sprintf("expected to already have image %s, but did not", image.Name()))
	}

	scanResults.ScanResults = &results
	scanStatus := ScanStatusInProgress
	if version.IsImageScanDone() {
		scanStatus = ScanStatusComplete
	}
	scanResults.ScanStatus = scanStatus

	return nil
}

func (vc *VulnerabilityCache) scanResults(podUID string) (*ScanResults, error) {
	pod, ok := vc.Pods[podUID]
	if !ok {
		return nil, errors.New(fmt.Sprintf("could not find pod of UID %s in cache", podUID))
	}

	overallStatus := ""
	policyViolationCount := 0
	vulnerabilityCount := 0
	for _, container := range pod.Containers {
		imageScanResults, ok := vc.Images[container.Image]
		if !ok {
			continue
		}
		if imageScanResults.ScanStatus != ScanStatusComplete {
			continue
		}
		if imageScanResults.ScanResults == nil {
			continue
		}
		policyViolationCount += imageScanResults.ScanResults.PolicyViolationCount
		vulnerabilityCount += imageScanResults.ScanResults.VulnerabilityCount
		// TODO what's the right way to combine all the 'OverallStatus' values
		//   from the individual image scans?
		if imageScanResults.ScanResults.OverallStatus != "NOT_IN_VIOLATION" {
			overallStatus = imageScanResults.ScanResults.OverallStatus
		}
	}
	return &ScanResults{
		OverallStatus:        overallStatus,
		PolicyViolationCount: policyViolationCount,
		VulnerabilityCount:   vulnerabilityCount,
	}, nil
}
